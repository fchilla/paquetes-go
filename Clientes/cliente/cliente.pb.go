// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: cliente.proto

package cliente

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BookList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *BookList) Reset() {
	*x = BookList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cliente_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookList) ProtoMessage() {}

func (x *BookList) ProtoReflect() protoreflect.Message {
	mi := &file_cliente_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookList.ProtoReflect.Descriptor instead.
func (*BookList) Descriptor() ([]byte, []int) {
	return file_cliente_proto_rawDescGZIP(), []int{0}
}

func (x *BookList) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cliente_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_cliente_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_cliente_proto_rawDescGZIP(), []int{1}
}

func (x *Chunk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cliente_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_cliente_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_cliente_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UploadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *UploadReply) Reset() {
	*x = UploadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cliente_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadReply) ProtoMessage() {}

func (x *UploadReply) ProtoReflect() protoreflect.Message {
	mi := &file_cliente_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadReply.ProtoReflect.Descriptor instead.
func (*UploadReply) Descriptor() ([]byte, []int) {
	return file_cliente_proto_rawDescGZIP(), []int{3}
}

func (x *UploadReply) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

var File_cliente_proto protoreflect.FileDescriptor

var file_cliente_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x35, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x23,
	0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x32, 0xab, 0x01, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x4c, 0x69, 0x62, 0x72,
	0x6f, 0x73, 0x12, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x75, 0x62,
	0x69, 0x72, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x12, 0x0e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28,
	0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cliente_proto_rawDescOnce sync.Once
	file_cliente_proto_rawDescData = file_cliente_proto_rawDesc
)

func file_cliente_proto_rawDescGZIP() []byte {
	file_cliente_proto_rawDescOnce.Do(func() {
		file_cliente_proto_rawDescData = protoimpl.X.CompressGZIP(file_cliente_proto_rawDescData)
	})
	return file_cliente_proto_rawDescData
}

var file_cliente_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cliente_proto_goTypes = []interface{}{
	(*BookList)(nil),    // 0: cliente.BookList
	(*Chunk)(nil),       // 1: cliente.Chunk
	(*Request)(nil),     // 2: cliente.Request
	(*UploadReply)(nil), // 3: cliente.UploadReply
}
var file_cliente_proto_depIdxs = []int32{
	2, // 0: cliente.Clientes.GetListaLibros:input_type -> cliente.Request
	2, // 1: cliente.Clientes.GetChunk:input_type -> cliente.Request
	1, // 2: cliente.Clientes.SubirLibro:input_type -> cliente.Chunk
	0, // 3: cliente.Clientes.GetListaLibros:output_type -> cliente.BookList
	1, // 4: cliente.Clientes.GetChunk:output_type -> cliente.Chunk
	3, // 5: cliente.Clientes.SubirLibro:output_type -> cliente.UploadReply
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cliente_proto_init() }
func file_cliente_proto_init() {
	if File_cliente_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cliente_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cliente_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cliente_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cliente_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cliente_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cliente_proto_goTypes,
		DependencyIndexes: file_cliente_proto_depIdxs,
		MessageInfos:      file_cliente_proto_msgTypes,
	}.Build()
	File_cliente_proto = out.File
	file_cliente_proto_rawDesc = nil
	file_cliente_proto_goTypes = nil
	file_cliente_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClientesClient is the client API for Clientes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientesClient interface {
	GetListaLibros(ctx context.Context, in *Request, opts ...grpc.CallOption) (*BookList, error)
	GetChunk(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Chunk, error)
	SubirLibro(ctx context.Context, opts ...grpc.CallOption) (Clientes_SubirLibroClient, error)
}

type clientesClient struct {
	cc grpc.ClientConnInterface
}

func NewClientesClient(cc grpc.ClientConnInterface) ClientesClient {
	return &clientesClient{cc}
}

func (c *clientesClient) GetListaLibros(ctx context.Context, in *Request, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, "/cliente.Clientes/GetListaLibros", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientesClient) GetChunk(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := c.cc.Invoke(ctx, "/cliente.Clientes/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientesClient) SubirLibro(ctx context.Context, opts ...grpc.CallOption) (Clientes_SubirLibroClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Clientes_serviceDesc.Streams[0], "/cliente.Clientes/SubirLibro", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientesSubirLibroClient{stream}
	return x, nil
}

type Clientes_SubirLibroClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadReply, error)
	grpc.ClientStream
}

type clientesSubirLibroClient struct {
	grpc.ClientStream
}

func (x *clientesSubirLibroClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientesSubirLibroClient) CloseAndRecv() (*UploadReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientesServer is the server API for Clientes service.
type ClientesServer interface {
	GetListaLibros(context.Context, *Request) (*BookList, error)
	GetChunk(context.Context, *Request) (*Chunk, error)
	SubirLibro(Clientes_SubirLibroServer) error
}

// UnimplementedClientesServer can be embedded to have forward compatible implementations.
type UnimplementedClientesServer struct {
}

func (*UnimplementedClientesServer) GetListaLibros(context.Context, *Request) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListaLibros not implemented")
}
func (*UnimplementedClientesServer) GetChunk(context.Context, *Request) (*Chunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (*UnimplementedClientesServer) SubirLibro(Clientes_SubirLibroServer) error {
	return status.Errorf(codes.Unimplemented, "method SubirLibro not implemented")
}

func RegisterClientesServer(s *grpc.Server, srv ClientesServer) {
	s.RegisterService(&_Clientes_serviceDesc, srv)
}

func _Clientes_GetListaLibros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientesServer).GetListaLibros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cliente.Clientes/GetListaLibros",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientesServer).GetListaLibros(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clientes_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientesServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cliente.Clientes/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientesServer).GetChunk(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clientes_SubirLibro_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientesServer).SubirLibro(&clientesSubirLibroServer{stream})
}

type Clientes_SubirLibroServer interface {
	SendAndClose(*UploadReply) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type clientesSubirLibroServer struct {
	grpc.ServerStream
}

func (x *clientesSubirLibroServer) SendAndClose(m *UploadReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientesSubirLibroServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Clientes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cliente.Clientes",
	HandlerType: (*ClientesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListaLibros",
			Handler:    _Clientes_GetListaLibros_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _Clientes_GetChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubirLibro",
			Handler:       _Clientes_SubirLibro_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cliente.proto",
}
