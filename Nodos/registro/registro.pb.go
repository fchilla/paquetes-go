// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: registro.proto

package registro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*RegRequest_Info
	//	*RegRequest_Chunk
	Data isRegRequest_Data `protobuf_oneof:"data"`
}

func (x *RegRequest) Reset() {
	*x = RegRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registro_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegRequest) ProtoMessage() {}

func (x *RegRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registro_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegRequest.ProtoReflect.Descriptor instead.
func (*RegRequest) Descriptor() ([]byte, []int) {
	return file_registro_proto_rawDescGZIP(), []int{0}
}

func (m *RegRequest) GetData() isRegRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *RegRequest) GetInfo() *BookInfo {
	if x, ok := x.GetData().(*RegRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (x *RegRequest) GetChunk() *ChunkLoc {
	if x, ok := x.GetData().(*RegRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isRegRequest_Data interface {
	isRegRequest_Data()
}

type RegRequest_Info struct {
	Info *BookInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type RegRequest_Chunk struct {
	Chunk *ChunkLoc `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*RegRequest_Info) isRegRequest_Data() {}

func (*RegRequest_Chunk) isRegRequest_Data() {}

type BookInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename    string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	ChunkNumber int64  `protobuf:"varint,2,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
	Nodes       string `protobuf:"bytes,3,opt,name=nodes,proto3" json:"nodes,omitempty"`
	IdNodo      int64  `protobuf:"varint,4,opt,name=idNodo,proto3" json:"idNodo,omitempty"`
}

func (x *BookInfo) Reset() {
	*x = BookInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registro_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookInfo) ProtoMessage() {}

func (x *BookInfo) ProtoReflect() protoreflect.Message {
	mi := &file_registro_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookInfo.ProtoReflect.Descriptor instead.
func (*BookInfo) Descriptor() ([]byte, []int) {
	return file_registro_proto_rawDescGZIP(), []int{1}
}

func (x *BookInfo) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BookInfo) GetChunkNumber() int64 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *BookInfo) GetNodes() string {
	if x != nil {
		return x.Nodes
	}
	return ""
}

func (x *BookInfo) GetIdNodo() int64 {
	if x != nil {
		return x.IdNodo
	}
	return 0
}

type ChunkLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *ChunkLoc) Reset() {
	*x = ChunkLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registro_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkLoc) ProtoMessage() {}

func (x *ChunkLoc) ProtoReflect() protoreflect.Message {
	mi := &file_registro_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkLoc.ProtoReflect.Descriptor instead.
func (*ChunkLoc) Descriptor() ([]byte, []int) {
	return file_registro_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkLoc) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ChunkLoc) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type RegReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RegReply) Reset() {
	*x = RegReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registro_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegReply) ProtoMessage() {}

func (x *RegReply) ProtoReflect() protoreflect.Message {
	mi := &file_registro_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegReply.ProtoReflect.Descriptor instead.
func (*RegReply) Descriptor() ([]byte, []int) {
	return file_registro_proto_rawDescGZIP(), []int{3}
}

func (x *RegReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_registro_proto protoreflect.FileDescriptor

var file_registro_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x22, 0x6a, 0x0a, 0x0a, 0x52, 0x65,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x6f, 0x22, 0x40,
	0x0a, 0x08, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x4a, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f,
	0x12, 0x3e, 0x0a, 0x0e, 0x45, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x6f, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x2e, 0x52, 0x65,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registro_proto_rawDescOnce sync.Once
	file_registro_proto_rawDescData = file_registro_proto_rawDesc
)

func file_registro_proto_rawDescGZIP() []byte {
	file_registro_proto_rawDescOnce.Do(func() {
		file_registro_proto_rawDescData = protoimpl.X.CompressGZIP(file_registro_proto_rawDescData)
	})
	return file_registro_proto_rawDescData
}

var file_registro_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_registro_proto_goTypes = []interface{}{
	(*RegRequest)(nil), // 0: registro.RegRequest
	(*BookInfo)(nil),   // 1: registro.BookInfo
	(*ChunkLoc)(nil),   // 2: registro.ChunkLoc
	(*RegReply)(nil),   // 3: registro.RegReply
}
var file_registro_proto_depIdxs = []int32{
	1, // 0: registro.RegRequest.info:type_name -> registro.BookInfo
	2, // 1: registro.RegRequest.chunk:type_name -> registro.ChunkLoc
	0, // 2: registro.Registro.EnviarRegistro:input_type -> registro.RegRequest
	3, // 3: registro.Registro.EnviarRegistro:output_type -> registro.RegReply
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_registro_proto_init() }
func file_registro_proto_init() {
	if File_registro_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_registro_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registro_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registro_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registro_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_registro_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RegRequest_Info)(nil),
		(*RegRequest_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registro_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_registro_proto_goTypes,
		DependencyIndexes: file_registro_proto_depIdxs,
		MessageInfos:      file_registro_proto_msgTypes,
	}.Build()
	File_registro_proto = out.File
	file_registro_proto_rawDesc = nil
	file_registro_proto_goTypes = nil
	file_registro_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegistroClient is the client API for Registro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistroClient interface {
	EnviarRegistro(ctx context.Context, opts ...grpc.CallOption) (Registro_EnviarRegistroClient, error)
}

type registroClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistroClient(cc grpc.ClientConnInterface) RegistroClient {
	return &registroClient{cc}
}

func (c *registroClient) EnviarRegistro(ctx context.Context, opts ...grpc.CallOption) (Registro_EnviarRegistroClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registro_serviceDesc.Streams[0], "/registro.Registro/EnviarRegistro", opts...)
	if err != nil {
		return nil, err
	}
	x := &registroEnviarRegistroClient{stream}
	return x, nil
}

type Registro_EnviarRegistroClient interface {
	Send(*RegRequest) error
	CloseAndRecv() (*RegReply, error)
	grpc.ClientStream
}

type registroEnviarRegistroClient struct {
	grpc.ClientStream
}

func (x *registroEnviarRegistroClient) Send(m *RegRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registroEnviarRegistroClient) CloseAndRecv() (*RegReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RegReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistroServer is the server API for Registro service.
type RegistroServer interface {
	EnviarRegistro(Registro_EnviarRegistroServer) error
}

// UnimplementedRegistroServer can be embedded to have forward compatible implementations.
type UnimplementedRegistroServer struct {
}

func (*UnimplementedRegistroServer) EnviarRegistro(Registro_EnviarRegistroServer) error {
	return status.Errorf(codes.Unimplemented, "method EnviarRegistro not implemented")
}

func RegisterRegistroServer(s *grpc.Server, srv RegistroServer) {
	s.RegisterService(&_Registro_serviceDesc, srv)
}

func _Registro_EnviarRegistro_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistroServer).EnviarRegistro(&registroEnviarRegistroServer{stream})
}

type Registro_EnviarRegistroServer interface {
	SendAndClose(*RegReply) error
	Recv() (*RegRequest, error)
	grpc.ServerStream
}

type registroEnviarRegistroServer struct {
	grpc.ServerStream
}

func (x *registroEnviarRegistroServer) SendAndClose(m *RegReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registroEnviarRegistroServer) Recv() (*RegRequest, error) {
	m := new(RegRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Registro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registro.Registro",
	HandlerType: (*RegistroServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnviarRegistro",
			Handler:       _Registro_EnviarRegistro_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "registro.proto",
}
